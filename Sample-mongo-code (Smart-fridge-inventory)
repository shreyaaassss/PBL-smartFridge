****FOLLOWING CODE ONLY WORKS ON YOUR PERSONAL MACHINES OR LAPTOPS *******
import os
import urllib.parse
import cv2
from PIL import Image
import google.generativeai as genai
import pymongo
from rich.console import Console
from typing import List, Optional, Union, Dict
from datetime import datetime
import tempfile
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class SmartKitchenAssistant:
    def __init__(self):
        """Initialize Smart Kitchen Assistant with database and AI configurations."""
        self.console = Console()
        self.temp_dir = tempfile.gettempdir()  # Temporary storage for images
        self._setup_mongodb()
        self._setup_gemini()

    def _setup_mongodb(self) -> None:
        """Set up MongoDB connection securely using environment variables."""
        try:
            username = urllib.parse.quote_plus(os.getenv("MONGO_USER", "default_user"))
            password = urllib.parse.quote_plus(os.getenv("MONGO_PASS", "default_pass"))
            mongo_uri = (
                f"mongodb+srv://{username}:{password}@pbl-fridge.e5p43.mongodb.net/"
                "?retryWrites=true&w=majority&appName=PBL-Fridge"
            )
            self.client = pymongo.MongoClient(mongo_uri)
            self.db = self.client["SmartKitchen"]
            self.fridge_items = self.db["fridge_items"]
            self.console.print("[bold green]‚úÖ Connected to MongoDB successfully![/]")
        except pymongo.errors.ConnectionFailure as e:
            self.console.print(f"[bold red]‚ùå MongoDB Connection Error:[/] {e}")
            raise

    def _setup_gemini(self) -> None:
        """Configure Gemini AI securely using environment variable."""
        api_key = os.getenv("GEMINI_API_KEY", "default_api_key")
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')

    def capture_image(self) -> Optional[str]:
        """Capture an image from the laptop camera."""
        try:
            cap = cv2.VideoCapture(0)
            if not cap.isOpened():
                raise Exception("Could not access webcam")

            self.console.print("[yellow]Press SPACE to capture or Q to quit.[/]")
            while True:
                ret, frame = cap.read()
                if not ret:
                    raise Exception("Failed to grab frame from camera")
                cv2.imshow('Camera Feed', frame)
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord(' '):
                    image_path = os.path.join(self.temp_dir, f"fridge_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg")
                    cv2.imwrite(image_path, frame)
                    self.console.print("[green]Image captured and saved![/]")
                    cap.release()
                    cv2.destroyAllWindows()
                    return image_path
            cap.release()
            cv2.destroyAllWindows()
        except Exception as e:
            self.console.print(f"[bold red]‚ùå Camera Error:[/] {str(e)}")
        return None

    def save_to_database(self, data: Union[List, Dict], collection_name: str) -> None:
        """Save data to MongoDB in a structured format."""
        collection = self.db[collection_name]
        timestamp = datetime.now()
        if isinstance(data, list):
            document = {"inventory": "; ".join(data), "timestamp": timestamp, "item_count": len(data)}
        else:
            data["timestamp"] = timestamp
            document = data
        collection.insert_one(document)

    def get_gemini_response(self, image_path: str, prompt: str) -> Optional[str]:
        """Process image with Gemini AI and return analysis."""
        try:
            if not os.path.exists(image_path):
                raise FileNotFoundError(f"Image file not found: {image_path}")
            image = Image.open(image_path)
            chat = self.model.start_chat(history=[])
            response = chat.send_message([prompt, image])
            return response.text
        except Exception as e:
            self.console.print(f"[bold red]‚ùå AI Processing Error:[/] {str(e)}")
        return None

    def analyze_fridge_contents(self, additional_prompt: str = "") -> None:
        """Capture and analyze fridge contents, saving results to database."""
        self.console.rule("[bold cyan]üßä Fridge Inventory Analysis üçΩÔ∏è[/]")
        image_path = self.capture_image()
        if not image_path:
            return

        prompt = ("Please analyze this fridge image and list visible food items with their approximate quantities. "
                  "Separate each item with semicolons.")
        result = self.get_gemini_response(image_path, prompt + additional_prompt)

        if result:
            fridge_data = [item.strip() for item in result.split(';') if item.strip()]
            self.save_to_database(fridge_data, "fridge_items")
            self.console.print("[bold green]‚úÖ Fridge inventory saved to database![/]")
            for item in fridge_data:
                self.console.print(f"‚Ä¢ {item}")
            os.remove(image_path)
        else:
            self.console.print("[bold red]‚ùå Analysis failed.[/]")

    def run(self) -> None:
        """Run the main application loop."""
        while True:
            self.console.rule("[bold cyan]üè† Smart Kitchen Assistant[/]")
            self.console.print("\n[bold yellow]Choose an option:[/]")
            self.console.print("1. Capture and Analyze Fridge Contents")
            self.console.print("2. View Previous Analysis")
            self.console.print("3. Exit")
            choice = input("\nEnter your choice (1-3): ").strip()
            if choice == '1':
                self.analyze_fridge_contents()
            elif choice == '2':
                recent = self.fridge_items.find().sort("timestamp", -1).limit(1)
                for doc in recent:
                    self.console.print("\n[bold cyan]Most Recent Analysis:[/]")
                    self.console.print(f"Date: {doc['timestamp']}")
                    for item in doc['inventory'].split(';'):
                        self.console.print(f"‚Ä¢ {item.strip()}")
            elif choice == '3':
                self.console.print("[bold green]‚úÖ Thank you for using Smart Kitchen Assistant![/]")
                break
            else:
                self.console.print("[bold red]‚ùå Invalid choice. Please enter 1, 2, or 3.[/]")
            input("\nPress Enter to continue...")

if __name__ == "__main__":
    try:
        assistant = SmartKitchenAssistant()
        assistant.run()
    except Exception as e:
        Console().print(f"[bold red]‚ùå Fatal error:[/] {str(e)}")
